////////////////////////////////////////////////////////////
// BGEE Leveled Spawns installation tp2 file
////////////////////////////////////////////////////////////

BACKUP ~bgeespawn/backup~

// AUTHOR ~AstroBryGuy~
SUPPORT ~https://forums.beamdog.com/discussion/34840~

VERSION ~v0.7~

README ~bgeespawn/readme.txt~

//////////////////////////////////////////////////////////////////////////////////////////////////
//PATCH_MACRO are_update_offset
//for addition of extended headers, this macro updates offsets of all extended headers that occur later than the extended header modified, then updates offsets stored in the variables
//////////////////////////////////////////////////////////////////////////////////////////////////
//Variables that need to be defined:
// -are_update_offset_increment
// -are_update_offset_datatype (can be actor, info, spawn, entrance, container, item, vertex, ambient, variable, door, explored, anim, tiled, song, rest, automap)
//////////////////////////////////////////////////////////////////////////////////////////////////
//Other requirements:
// -all types of %are_update_offset_datatype%_off must have been read
// -the specified %are_update_offset_datatype%_num must have been read
//////////////////////////////////////////////////////////////////////////////////////////////////
DEFINE_PATCH_MACRO are_update_offset BEGIN
  SPRINT are_update_offset_datatype_off "%are_update_offset_datatype%_off"
  SPRINT are_update_offset_datatype_num "%are_update_offset_datatype%_num"

  PATCH_IF (NOT (("%are_update_offset_datatype%" STRING_COMPARE_CASE "actor")=0))
            AND (("%actor_off%" > EVALUATE_BUFFER "%%are_update_offset_datatype_off%%")
            OR (("%actor_off%" = EVALUATE_BUFFER "%%are_update_offset_datatype_off%%") AND (EVALUATE_BUFFER "%%are_update_offset_datatype_num%%" = 0))) BEGIN
    WRITE_LONG 0x54 ("%actor_off%" + "%are_update_offset_increment%")
  END
  PATCH_IF (NOT (("%are_update_offset_datatype%" STRING_COMPARE_CASE "info")=0))   
            AND (("%info_off%" > EVALUATE_BUFFER "%%are_update_offset_datatype_off%%")
            OR (("%info_off%" = EVALUATE_BUFFER "%%are_update_offset_datatype_off%%") AND (EVALUATE_BUFFER "%%are_update_offset_datatype_num%%" = 0))) BEGIN
    WRITE_LONG 0x5c ("%info_off%" + "%are_update_offset_increment%")
  END
  PATCH_IF (NOT (("%are_update_offset_datatype%" STRING_COMPARE_CASE "spawn")=0))
            AND (("%spawn_off%" > EVALUATE_BUFFER "%%are_update_offset_datatype_off%%")
            OR (("%spawn_off%" = EVALUATE_BUFFER "%%are_update_offset_datatype_off%%") AND (EVALUATE_BUFFER "%%are_update_offset_datatype_num%%" = 0))) BEGIN
    WRITE_LONG 0x60 ("%spawn_off%" + "%are_update_offset_increment%")
  END
  PATCH_IF (NOT (("%are_update_offset_datatype%" STRING_COMPARE_CASE "entrance")=0))
            AND (("%entrance_off%" > EVALUATE_BUFFER "%%are_update_offset_datatype_off%%")
            OR (("%entrance_off%" = EVALUATE_BUFFER "%%are_update_offset_datatype_off%%") AND (EVALUATE_BUFFER "%%are_update_offset_datatype_num%%" = 0))) BEGIN
    WRITE_LONG 0x68 ("%entrance_off%" + "%are_update_offset_increment%")
  END
  PATCH_IF (NOT (("%are_update_offset_datatype%" STRING_COMPARE_CASE "container")=0))
            AND (("%container_off%" > EVALUATE_BUFFER "%%are_update_offset_datatype_off%%")
            OR (("%container_off%" = EVALUATE_BUFFER "%%are_update_offset_datatype_off%%") AND (EVALUATE_BUFFER "%%are_update_offset_datatype_num%%" = 0))) BEGIN
    WRITE_LONG 0x70 ("%container_off%" + "%are_update_offset_increment%")
  END
  PATCH_IF (NOT (("%are_update_offset_datatype%" STRING_COMPARE_CASE "item")=0))
            AND (("%item_off%" > EVALUATE_BUFFER "%%are_update_offset_datatype_off%%")
            OR (("%item_off%" = EVALUATE_BUFFER "%%are_update_offset_datatype_off%%") AND (EVALUATE_BUFFER "%%are_update_offset_datatype_num%%" = 0))) BEGIN
    WRITE_LONG 0x78 ("%item_off%" + "%are_update_offset_increment%")
  END
  PATCH_IF (NOT (("%are_update_offset_datatype%" STRING_COMPARE_CASE "vertex")=0))
            AND (("%vertex_off%" > EVALUATE_BUFFER "%%are_update_offset_datatype_off%%")
            OR (("%vertex_off%" = EVALUATE_BUFFER "%%are_update_offset_datatype_off%%") AND (EVALUATE_BUFFER "%%are_update_offset_datatype_num%%" = 0))) BEGIN
    WRITE_LONG 0x7c ("%vertex_off%" + "%are_update_offset_increment%")
  END
  PATCH_IF (NOT (("%are_update_offset_datatype%" STRING_COMPARE_CASE "ambient")=0))
            AND (("%ambient_off%" > EVALUATE_BUFFER "%%are_update_offset_datatype_off%%")
            OR (("%ambient_off%" = EVALUATE_BUFFER "%%are_update_offset_datatype_off%%") AND (EVALUATE_BUFFER "%%are_update_offset_datatype_num%%" = 0))) BEGIN
    WRITE_LONG 0x84 ("%ambient_off%" + "%are_update_offset_increment%")
  END
  PATCH_IF (NOT (("%are_update_offset_datatype%" STRING_COMPARE_CASE "variable")=0))
            AND (("%variable_off%" > EVALUATE_BUFFER "%%are_update_offset_datatype_off%%")
            OR (("%variable_off%" = EVALUATE_BUFFER "%%are_update_offset_datatype_off%%") AND (EVALUATE_BUFFER "%%are_update_offset_datatype_num%%" = 0))) BEGIN
    WRITE_LONG 0x88 ("%variable_off%" + "%are_update_offset_increment%")
  END
  PATCH_IF (NOT (("%are_update_offset_datatype%" STRING_COMPARE_CASE "door")=0))
            AND (("%door_off%" > EVALUATE_BUFFER "%%are_update_offset_datatype_off%%")
            OR (("%door_off%" = EVALUATE_BUFFER "%%are_update_offset_datatype_off%%") AND (EVALUATE_BUFFER "%%are_update_offset_datatype_num%%" = 0))) BEGIN
    WRITE_LONG 0xa8 ("%door_off%" + "%are_update_offset_increment%")
  END
  PATCH_IF (NOT (("%are_update_offset_datatype%" STRING_COMPARE_CASE "explored")=0))
            AND (("%explored_off%" > EVALUATE_BUFFER "%%are_update_offset_datatype_off%%")
            OR (("%explored_off%" = EVALUATE_BUFFER "%%are_update_offset_datatype_off%%") AND (EVALUATE_BUFFER "%%are_update_offset_datatype_num%%" = 0))) BEGIN
    WRITE_LONG 0xa0 ("%explored_off%" + "%are_update_offset_increment%")
  END
  PATCH_IF (NOT (("%are_update_offset_datatype%" STRING_COMPARE_CASE "anim")=0))
            AND (("%anim_off%" > EVALUATE_BUFFER "%%are_update_offset_datatype_off%%")
            OR (("%anim_off%" = EVALUATE_BUFFER "%%are_update_offset_datatype_off%%") AND (EVALUATE_BUFFER "%%are_update_offset_datatype_num%%" = 0))) BEGIN
    WRITE_LONG 0xb0 ("%anim_off%" + "%are_update_offset_increment%")
  END
  PATCH_IF (NOT (("%are_update_offset_datatype%" STRING_COMPARE_CASE "tiled")=0))
            AND (("%tiled_off%" > EVALUATE_BUFFER "%%are_update_offset_datatype_off%%")
            OR (("%tiled_off%" = EVALUATE_BUFFER "%%are_update_offset_datatype_off%%") AND (EVALUATE_BUFFER "%%are_update_offset_datatype_num%%" = 0))) BEGIN
    WRITE_LONG 0xb8 ("%tiled_off%" + "%are_update_offset_increment%")
  END
  PATCH_IF (NOT (("%are_update_offset_datatype%" STRING_COMPARE_CASE "song")=0))
            AND (("%song_off%" > EVALUATE_BUFFER "%%are_update_offset_datatype_off%%")
            OR (("%song_off%" = EVALUATE_BUFFER "%%are_update_offset_datatype_off%%") AND (EVALUATE_BUFFER "%%are_update_offset_datatype_num%%" = 0))) BEGIN
    WRITE_LONG 0xbc ("%song_off%" + "%are_update_offset_increment%")
  END
  PATCH_IF (NOT (("%are_update_offset_datatype%" STRING_COMPARE_CASE "rest")=0))
            AND (("%rest_off%" > EVALUATE_BUFFER "%%are_update_offset_datatype_off%%")
            OR (("%rest_off%" = EVALUATE_BUFFER "%%are_update_offset_datatype_off%%") AND (EVALUATE_BUFFER "%%are_update_offset_datatype_num%%" = 0))) BEGIN
    WRITE_LONG 0xc0 ("%rest_off%" + "%are_update_offset_increment%")
  END
  PATCH_IF (NOT (("%are_update_offset_datatype%" STRING_COMPARE_CASE "automap")=0))
            AND (("%automap_off%" > EVALUATE_BUFFER "%%are_update_offset_datatype_off%%")
            OR (("%automap_off%" = EVALUATE_BUFFER "%%are_update_offset_datatype_off%%") AND (EVALUATE_BUFFER "%%are_update_offset_datatype_num%%" = 0))) BEGIN
    WRITE_LONG 0xc4 ("%automap_off%" + "%are_update_offset_increment%")
  END

  READ_LONG 0x54 actor_off
  READ_LONG 0x5c info_off
  READ_LONG 0x60 spawn_off
  READ_LONG 0x68 entrance_off
  READ_LONG 0x70 container_off
  READ_LONG 0x78 item_off
  READ_LONG 0x7c vertex_off
  READ_LONG 0x84 ambient_off
  READ_LONG 0x88 variable_off
  READ_LONG 0xa8 door_off
  READ_LONG 0xa0 explored_off
  READ_LONG 0xb0 anim_off
  READ_LONG 0xb8 tiled_off
  READ_LONG 0xbc song_off
  READ_LONG 0xc0 rest_off
  READ_LONG 0xc4 automap_off

END
//////////////////////////////////////////////////////////////////////////////////////////////////


//Levelled spawns/////////////////////////////////////////
BEGIN ~BGEE Leveling Spawns Mod~
REQUIRE_PREDICATE (GAME_IS ~bgee eet~) ~Baldur's Gate Enhanced Edition / EET could not be detected.~
DESIGNATED 101
LABEL AY-BGEESPAWN

ACTION_IF (GAME_IS ~bgee~) BEGIN
	INCLUDE ~bgeespawn/lib/liam_bgee_vars.tpa~
END ELSE ACTION_IF (GAME_IS ~eet~) BEGIN
	INCLUDE ~bgeespawn/lib/eet_cpmvars.tpa~
END

ACTION_IF !(FILE_EXISTS ~override/ay_bgeespawn.ini~) BEGIN
	COPY ~BGEESpawn/ini/ay_bgeespawn.ini~ ~override~
END

INCLUDE ~override/ay_bgeespawn.ini~

  OUTER_WHILE (!(IS_AN_INT ~spawntimer~) OR (~spawntimer~ > 0x9) OR (~spawntimer~ < 0x0)) BEGIN
    PRINT ~Please choose one of the following options for the time interval between spawn point resets:
[1] 4 HOURS of game time between spawnings
[2] 8 HOURS of game time between spawnings
[3] 16 HOURS of game time between spawnings
[4] 1 day of game time between spawnings
[5] 2 days of game time between spawnings
[6] 4 days of game time between spawnings
[7] 7 days of game time between spawnings
[8] 10 days of game time between spawnings
[9] 14 days of game time between spawnings
[0] 1000 days of game time between spawnings

Note: Game default spawn point reset timing is approximately 16 hours.~
    ACTION_READLN ~spawntimer~
  END

        ACTION_IF ("spawntimer" = 1) THEN BEGIN
        APPEND ~gtimes.ids~ ~1200 AY_SPAWN_TIMER~
        PRINT ~4 hours of game time between spawns~
        END
        ACTION_IF ("spawntimer" = 2) THEN BEGIN
        APPEND ~gtimes.ids~ ~2400 AY_SPAWN_TIMER~
        PRINT ~8 hours of game time between spawns~
        END
        ACTION_IF ("spawntimer" = 3) THEN BEGIN
        APPEND ~gtimes.ids~ ~4800 AY_SPAWN_TIMER~
        PRINT ~16 hours of game time between spawns~
        END
        ACTION_IF ("spawntimer" = 4) THEN BEGIN
        APPEND ~gtimes.ids~ ~7200 AY_SPAWN_TIMER~
        PRINT ~1 day of game time between spawns~
        END
        ACTION_IF ("spawntimer" = 5) THEN BEGIN
        APPEND ~gtimes.ids~ ~14400 AY_SPAWN_TIMER~
        PRINT ~2 days of game time between spawns~
        END
        ACTION_IF ("spawntimer" = 6) THEN BEGIN
        APPEND ~gtimes.ids~ ~28800 AY_SPAWN_TIMER~
        PRINT ~4 days of game time between spawns~
        END
        ACTION_IF ("spawntimer" = 7) THEN BEGIN
        APPEND ~gtimes.ids~ ~50400 AY_SPAWN_TIMER~
        PRINT ~7 days of game time between spawns~
        END
        ACTION_IF ("spawntimer" = 8) THEN BEGIN
        APPEND ~gtimes.ids~ ~72000 AY_SPAWN_TIMER~
        PRINT ~10 days of game time between spawns~
        END
        ACTION_IF ("spawntimer" = 9) THEN BEGIN
        APPEND ~gtimes.ids~ ~100800 AY_SPAWN_TIMER~
        PRINT ~14 days of game time between spawns~
        END
        ACTION_IF ("spawntimer" = 0) THEN BEGIN
        APPEND ~gtimes.ids~ ~7200000 AY_SPAWN_TIMER~
        PRINT ~1000 days of game time between spawns~
        END

  OUTER_WHILE (!(IS_AN_INT ~spawnchance~) OR (~spawnchance~ > 0x9) OR (~spawnchance~ < 0x0)) BEGIN
    PRINT ~Please choose one of the following options for the probability of spawn point being populated when triggered:
[1] 10% chance of spawning
[2] 20% chance of spawning
[3] 35% chance of spawning
[4] 50% chance of spawning
[5] 65% chance of spawning
[6] 75% chance of spawning
[7] 85% chance of spawning
[8] 90% chance of spawning
[9] 95% chance of spawning
[0] 100% chance of spawning

Note: Game defaults are 85-100%, depending on area.~
    ACTION_READLN ~spawnchance~
  END

        ACTION_IF ("spawnchance" = 1) THEN BEGIN
        OUTER_SPRINT ~GoSpawn~ ~10~
        OUTER_SPRINT ~NoSpawn~ ~90~
        PRINT ~10% chance of spawning~
        END
        ACTION_IF ("spawnchance" = 2) THEN BEGIN
        OUTER_SPRINT ~GoSpawn~ ~20~
        OUTER_SPRINT ~NoSpawn~ ~80~
        PRINT ~20% chance of spawning~
        END
        ACTION_IF ("spawnchance" = 3) THEN BEGIN
        OUTER_SPRINT ~GoSpawn~ ~35~
        OUTER_SPRINT ~NoSpawn~ ~65~
        PRINT ~35% chance of spawning~
        END
        ACTION_IF ("spawnchance" = 4) THEN BEGIN
        OUTER_SPRINT ~GoSpawn~ ~50~
        OUTER_SPRINT ~NoSpawn~ ~50~
        PRINT ~50% chance of spawning~
        END
        ACTION_IF ("spawnchance" = 5) THEN BEGIN
        OUTER_SPRINT ~GoSpawn~ ~65~
        OUTER_SPRINT ~NoSpawn~ ~35~
        PRINT ~65% chance of spawning~
        END
        ACTION_IF ("spawnchance" = 6) THEN BEGIN
        OUTER_SPRINT ~GoSpawn~ ~75~
        OUTER_SPRINT ~NoSpawn~ ~25~
        PRINT ~75% chance of spawning~
        END
        ACTION_IF ("spawnchance" = 7) THEN BEGIN
        OUTER_SPRINT ~GoSpawn~ ~85~
        OUTER_SPRINT ~NoSpawn~ ~15~
        PRINT ~85% chance of spawning~
        END
        ACTION_IF ("spawnchance" = 8) THEN BEGIN
        OUTER_SPRINT ~GoSpawn~ ~90~
        OUTER_SPRINT ~NoSpawn~ ~10~
        PRINT ~90% chance of spawning~
        END
        ACTION_IF ("spawnchance" = 9) THEN BEGIN
        OUTER_SPRINT ~GoSpawn~ ~95~
        OUTER_SPRINT ~NoSpawn~ ~5~
        PRINT ~95% chance of spawning~
        END
        ACTION_IF ("spawnchance" = 0) THEN BEGIN
        OUTER_SPRINT ~GoSpawn~ ~100~
        OUTER_SPRINT ~NoSpawn~ ~0~
        PRINT ~100% chance of spawning~
        END
		
//added for difficulty based option
  OUTER_WHILE (!(IS_AN_INT ~spawntype~) OR (~spawntype~ > 0x9) OR (~spawntype~ < 0x0)) BEGIN
    PRINT ~Please choose one of the following options for the type of spawn system:
[1] Spawns are based on average party level
[2] Spawns are based on game difficulty level (EasyTutu style)~
    ACTION_READLN ~spawntype~
  END

ACTION_IF ("spawntype" = 1) THEN BEGIN
	ACTION_BASH_FOR ~bgeespawn/scripts~ ~.*.baf~ BEGIN
		COPY ~%BASH_FOR_FILESPEC%~ ~%BASH_FOR_DIRECTORY%~
		REPLACE_TEXTUALLY EXACT_MATCH ~#GOSPAWN~ ~#%GoSpawn%~
		REPLACE_TEXTUALLY EXACT_MATCH ~#NOSPAWN~ ~#%NoSpawn%~
	BUT_ONLY_IF_IT_CHANGES
	END
END

ACTION_IF ("spawntype" = 2) THEN BEGIN
	ACTION_BASH_FOR ~bgeespawn/scripts2~ ~.*.baf~ BEGIN
		COPY ~%BASH_FOR_FILESPEC%~ ~%BASH_FOR_DIRECTORY%~
		REPLACE_TEXTUALLY EXACT_MATCH ~#GOSPAWN~ ~#%GoSpawn%~
		REPLACE_TEXTUALLY EXACT_MATCH ~#NOSPAWN~ ~#%NoSpawn%~
	BUT_ONLY_IF_IT_CHANGES
	END
END
///////////////////////////////////////////////

ACTION_BASH_FOR ~bgeespawn/info~ ~.*.nfp~ BEGIN
COPY ~%BASH_FOR_FILESPEC%~ ~%BASH_FOR_DIRECTORY%~
  SPRINT source "%SOURCE_RES%"
  PATCH_IF (GAME_IS ~eet~) BEGIN
    INNER_PATCH_SAVE area_name "%SOURCE_RES%" BEGIN
      REPLACE_TEXTUALLY "^AR" "BG"
    END  
  END ELSE BEGIN
    SPRINT area_name "%SOURCE_RES%"
  END
  SET info_vertex_num_new_total = 0

  //ignore the placeholder and any 0-byte files
  PATCH_IF NOT ("%SOURCE_SIZE%" = 0) BEGIN
    FOR (i=0;i<10000;i+=1) BEGIN
      READ_ASCII ("%i%"*0xc4) info_data_new (196)
      READ_ASCII (("%i%" + 1)*0xc4) buffer ELSE 10000 (196) //check if next read is at illegal offset
      READ_SHORT ("%i%"*0xc4 + 0x2a) info_vertex_num_new
      SET info_vertex_num_new_total += "%info_vertex_num_new%"

      //add to the corresponding ARE file with the same ResRef
      INNER_ACTION BEGIN
        COPY_EXISTING ~%area_name%.are~ ~override/%area_name%.are~
          READ_LONG 0x54 actor_off
          READ_LONG 0x5c info_off
          READ_LONG 0x60 spawn_off
          READ_LONG 0x68 entrance_off
          READ_LONG 0x70 container_off
          READ_LONG 0x78 item_off
          READ_LONG 0x7c vertex_off
          READ_LONG 0x84 ambient_off
          READ_LONG 0x88 variable_off
          READ_LONG 0xa8 door_off
          READ_LONG 0xa0 explored_off
          READ_LONG 0xb0 anim_off
          READ_LONG 0xb8 tiled_off
          READ_LONG 0xbc song_off
          READ_LONG 0xc0 rest_off
          READ_LONG 0xc4 automap_off
          READ_SHORT 0x5a info_num
          READ_SHORT 0x64 spawn_num
          READ_SHORT 0x74 container_num
          READ_SHORT 0x80 vertex_num
          READ_SHORT 0xa4 door_num

          //deactivate spawn point using its flag when set
          PATCH_IF ("disablevanillaspawns" = 1) BEGIN
            FOR (n=0;n<"%spawn_num%";n+=1) BEGIN
              WRITE_SHORT ("%spawn_off%" + "%n%"*0xc8 + 0x86) 0
            END
          END

          //update offsets for info information insert first
          SPRINT are_update_offset_datatype "info"
          SET are_update_offset_increment = 196
          LAUNCH_PATCH_MACRO are_update_offset

          //insert info information at the top of the info list
          INSERT_BYTES "%info_off%" 196
          WRITE_EVALUATED_ASCII "%info_off%" "%info_data_new%" #196
          WRITE_LONG ("%info_off%" + 0x2c) 0 //set first vertex index to zero
          SET info_num +=1
          WRITE_SHORT 0x5a "%info_num%"

          //update offsets for vertex information insert
          SPRINT are_update_offset_datatype "vertex"
          SET are_update_offset_increment = 0x4 * "%info_vertex_num_new%"
          LAUNCH_PATCH_MACRO are_update_offset

          //insert vertex information at the top of the vertex list
          FOR (j=0;j<"%info_vertex_num_new%";j+=1) BEGIN
            
            INNER_ACTION BEGIN
              COPY ~bgeespawn/vertex/%source%.vtx~ ~bgeespawn/vertex/%source%.vtx~
                READ_LONG (("%j%" + "%info_vertex_num_new_total%" - "%info_vertex_num_new%")*0x4) vertex_data_new
              BUT_ONLY_IF_IT_CHANGES
            END          

            READ_SHORT 0x80 vertex_num
            INSERT_BYTES ("%vertex_off%") 4
            WRITE_LONG ("%vertex_off%") "%vertex_data_new%"
            SET vertex_num +=1
            WRITE_SHORT 0x80 "%vertex_num%"
          END

          //update vertex indices for info points after the new Info Point 0
          FOR (k=1;k<"%info_num%";k+=1) BEGIN
            READ_SHORT ("%info_off%" + "%k%"*0xc4 + 0x2c) info_vertex_first_idx
            WRITE_SHORT ("%info_off%" + "%k%"*0xc4 + 0x2c) ("%info_vertex_first_idx%" + "%info_vertex_num_new%")
          END

          //update vertex indices for doors
          FOR (l=0;l<"%door_num%";l+=1) BEGIN
            READ_LONG ("%door_off%" + "%l%"*0xc8 + 0x2c) door_vertex_open_first_idx
            READ_LONG ("%door_off%" + "%l%"*0xc8 + 0x34) door_vertex_closed_first_idx
            READ_LONG ("%door_off%" + "%l%"*0xc8 + 0x48) door_vertex_impede_closed_first_idx
            READ_LONG ("%door_off%" + "%l%"*0xc8 + 0x50) door_vertex_impede_open_first_idx
            WRITE_LONG ("%door_off%" + "%l%"*0xc8 + 0x2c) ("%door_vertex_open_first_idx%" + "%info_vertex_num_new%")
            WRITE_LONG ("%door_off%" + "%l%"*0xc8 + 0x34) ("%door_vertex_closed_first_idx%" + "%info_vertex_num_new%")
            WRITE_LONG ("%door_off%" + "%l%"*0xc8 + 0x48) ("%door_vertex_impede_closed_first_idx%" + "%info_vertex_num_new%")
            WRITE_LONG ("%door_off%" + "%l%"*0xc8 + 0x50) ("%door_vertex_impede_open_first_idx%" + "%info_vertex_num_new%")
          END

          //update vertex indices for containers
          FOR (m=0;m<"%container_num%";m+=1) BEGIN
            READ_LONG ("%container_off%" + "%m%"*0xc0 + 0x50) container_vertex_first_idx
            WRITE_LONG ("%container_off%" + "%m%"*0xc0 + 0x50) ("%container_vertex_first_idx%" + "%info_vertex_num_new%")
          END

        BUT_ONLY_IF_IT_CHANGES
      END

      //stop the FOR loop on an illegal offset read
      PATCH_IF (("%buffer%" STRING_COMPARE_CASE "10000")=0) BEGIN
        SET i = 10000
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES
END

COPY_EXISTING ~ankheg.cre~ ~override~
  WRITE_ASCII 0x280 ~ankheg~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~bandit.cre~ ~override~
  WRITE_ASCII 0x280 ~bandit~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~battho.cre~ ~override~
  WRITE_ASCII 0x280 ~battho~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~bearbl.cre~ ~override~
  WRITE_ASCII 0x280 ~bearbl~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~bearbr.cre~ ~override~
  WRITE_ASCII 0x280 ~bearbr~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~bearca.cre~ ~override~
  WRITE_ASCII 0x280 ~bearca~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~carrio.cre~ ~override~
  WRITE_ASCII 0x280 ~carrio~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~dogwa.cre~ ~override~
  WRITE_ASCII 0x280 ~dogwa~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~dogwi.cre~ ~override~
  WRITE_ASCII 0x280 ~dogwi~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~doppgr.cre~ ~override~
  WRITE_ASCII 0x280 ~doppgr~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~dopple.cre~ ~override~
  WRITE_ASCII 0x280 ~dopple~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~etterc.cre~ ~override~
  WRITE_ASCII 0x280 ~etterc~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~fgolem.cre~ ~override~
  WRITE_ASCII 0x280 ~fgolem~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~flind.cre~ ~override~
  WRITE_ASCII 0x280 ~flind~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~ghast.cre~ ~override~
  WRITE_ASCII 0x280 ~ghast~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~ghoul.cre~ ~override~
  WRITE_ASCII 0x280 ~ghoul~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~ghoullor.cre~ ~override~
  WRITE_ASCII 0x280 ~ghoullor~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~gibber.cre~ ~override~
  WRITE_ASCII 0x280 ~gibber~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~gibber2.cre~ ~override~
  WRITE_ASCII 0x280 ~gibber2~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~gnoll.cre~ ~override~
  WRITE_ASCII 0x280 ~gnoll~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~gnoll_a.cre~ ~override~
  WRITE_ASCII 0x280 ~gnoll_a~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~gnoll_b.cre~ ~override~
  WRITE_ASCII 0x280 ~gnoll_b~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~gnoll_d.cre~ ~override~
  WRITE_ASCII 0x280 ~gnoll_d~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~gnoll_e.cre~ ~override~
  WRITE_ASCII 0x280 ~gnoll_e~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~hobelite.cre~ ~override~
  WRITE_ASCII 0x280 ~hobelite~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~hobgoa_a.cre~ ~override~
  WRITE_ASCII 0x280 ~hobgoa_a~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~hobgoa_b.cre~ ~override~
  WRITE_ASCII 0x280 ~hobgoa_b~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~hobgoa_c.cre~ ~override~
  WRITE_ASCII 0x280 ~hobgoa_c~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~hobgoa_d.cre~ ~override~
  WRITE_ASCII 0x280 ~hobgoa_d~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~hobgoa_e.cre~ ~override~
  WRITE_ASCII 0x280 ~hobgoa_e~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~hobgob.cre~ ~override~
  WRITE_ASCII 0x280 ~hobgob~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~hobgob_a.cre~ ~override~
  WRITE_ASCII 0x280 ~hobgob_a~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~hobgob_b.cre~ ~override~
  WRITE_ASCII 0x280 ~hobgob_b~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~hobgob_c.cre~ ~override~
  WRITE_ASCII 0x280 ~hobgob_c~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~hobgob_d.cre~ ~override~
  WRITE_ASCII 0x280 ~hobgob_d~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~hobgob_e.cre~ ~override~
  WRITE_ASCII 0x280 ~hobgob_e~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~ironelit.cre~ ~override~
  WRITE_ASCII 0x280 ~ironelit~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~irongu.cre~ ~override~
  WRITE_ASCII 0x280 ~irongu~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~jellgr.cre~ ~override~
  WRITE_ASCII 0x280 ~jellgr~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~jellmu.cre~ ~override~
  WRITE_ASCII 0x280 ~jellmu~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~jelloc.cre~ ~override~
  WRITE_ASCII 0x280 ~jelloc~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~jellygr.cre~ ~override~
  WRITE_ASCII 0x280 ~jellygr~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~jellymu.cre~ ~override~
  WRITE_ASCII 0x280 ~jellymu~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~kobcomm.cre~ ~override~
  WRITE_ASCII 0x280 ~kobcomm~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~kobola_a.cre~ ~override~
  WRITE_ASCII 0x280 ~kobola_a~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~kobola_b.cre~ ~override~
  WRITE_ASCII 0x280 ~kobola_b~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~kobola_c.cre~ ~override~
  WRITE_ASCII 0x280 ~kobola_c~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~kobola_d.cre~ ~override~
  WRITE_ASCII 0x280 ~kobola_d~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~kobola_e.cre~ ~override~
  WRITE_ASCII 0x280 ~kobola_e~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~kobold.cre~ ~override~
  WRITE_ASCII 0x280 ~kobold~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~kobold_a.cre~ ~override~
  WRITE_ASCII 0x280 ~kobold_a~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~kobold_b.cre~ ~override~
  WRITE_ASCII 0x280 ~kobold_b~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~kobold_c.cre~ ~override~
  WRITE_ASCII 0x280 ~kobold_c~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~kobold_d.cre~ ~override~
  WRITE_ASCII 0x280 ~kobold_d~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~kobold_e.cre~ ~override~
  WRITE_ASCII 0x280 ~kobold_e~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~kobolda.cre~ ~override~
  WRITE_ASCII 0x280 ~kobolda~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~ogre.cre~ ~override~
  WRITE_ASCII 0x280 ~ogre~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~ogreberz.cre~ ~override~
  WRITE_ASCII 0x280 ~ogreberz~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~ogregr.cre~ ~override~
  WRITE_ASCII 0x280 ~ogregr~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~ogrema.cre~ ~override~
  WRITE_ASCII 0x280 ~ogrema~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~skelet_a.cre~ ~override~
  WRITE_ASCII 0x280 ~skelet_a~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~skelet_b.cre~ ~override~
  WRITE_ASCII 0x280 ~skelet_b~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~skelet_c.cre~ ~override~
  WRITE_ASCII 0x280 ~skelet_c~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~skelet03.cre~ ~override~
  WRITE_ASCII 0x280 ~skelet03~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~skelets.cre~ ~override~
  WRITE_ASCII 0x280 ~skelets~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~spidgi.cre~ ~override~
  WRITE_ASCII 0x280 ~spidgi~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~spidhu.cre~ ~override~
  WRITE_ASCII 0x280 ~spidhu~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~spidph.cre~ ~override~
  WRITE_ASCII 0x280 ~spidph~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~spidsw.cre~ ~override~
  WRITE_ASCII 0x280 ~spidsw~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~spidwr.cre~ ~override~
  WRITE_ASCII 0x280 ~spidwr~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~tasloi.cre~ ~override~
  WRITE_ASCII 0x280 ~tasloi~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~werewo.cre~ ~override~
  WRITE_ASCII 0x280 ~werewo~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~wolf.cre~ ~override~
  WRITE_ASCII 0x280 ~wolf~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~wolfdi.cre~ ~override~
  WRITE_ASCII 0x280 ~wolfdi~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~wolfdr.cre~ ~override~
  WRITE_ASCII 0x280 ~wolfdr~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~wolfva.cre~ ~override~
  WRITE_ASCII 0x280 ~wolfva~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~wolfwe.cre~ ~override~
  WRITE_ASCII 0x280 ~wolfwe~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~wolfwegl.cre~ ~override~
  WRITE_ASCII 0x280 ~wolfwegl~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~wolfwi.cre~ ~override~
  WRITE_ASCII 0x280 ~wolfwi~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~worg.cre~ ~override~
  WRITE_ASCII 0x280 ~worg~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~xvart.cre~ ~override~
  WRITE_ASCII 0x280 ~xvart~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~xvart_a.cre~ ~override~
  WRITE_ASCII 0x280 ~xvart_a~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~xvart_b.cre~ ~override~
  WRITE_ASCII 0x280 ~xvart_b~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~xvart_c.cre~ ~override~
  WRITE_ASCII 0x280 ~xvart_c~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~zombie.cre~ ~override~
  WRITE_ASCII 0x280 ~zombie~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~zombie_a.cre~ ~override~
  WRITE_ASCII 0x280 ~zombie_a~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~zombie_b.cre~ ~override~
  WRITE_ASCII 0x280 ~zombie_b~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~zombie_c.cre~ ~override~
  WRITE_ASCII 0x280 ~zombie_c~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~zombie_d.cre~ ~override~
  WRITE_ASCII 0x280 ~zombie_d~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~zombie_e.cre~ ~override~
  WRITE_ASCII 0x280 ~zombie_e~ #32 // dv
BUT_ONLY_IF_IT_CHANGES

//added if statements for script compile for difficulty option
ACTION_IF ("spawntype" = 1) THEN BEGIN
COMPILE ~bgeespawn/scripts~ EVALUATE_BUFFER
END
ACTION_IF ("spawntype" = 2) THEN BEGIN
COMPILE ~bgeespawn/scripts2~ EVALUATE_BUFFER
END